package config

import (
	"os"
	"path/filepath"
	"log"
	"fmt"
	"path"
	"drawbridge/pkg/utils"
	"drawbridge/pkg/errors"
)

type Template struct {
	Content string `mapstructure:"content"`
	FilePath string `mapstructure:"filepath"`
}



func (t *Template) WriteConfigTemplate(answerData map[string]interface{}, configDir string) error {
	// modify/tweak the config template because its a known type.

	t.FilePath = path.Join(configDir, t.FilePath)
	t.Content = configTemplatePrefix(answerData) + t.Content

	return t.WriteTemplate(answerData)
}

func configTemplatePrefix(answerData map[string]interface{}) string {
	prefix := utils.StripIndent(
		`
		# This file was automatically generated by Drawbridge
		# Do not modify.
		#
		# Answers:`)
	for key, value := range answerData {
		if key == "config_dir" || key == "pem_dir" || key == "active_extra_templates" {
			continue
		}

		prefix += fmt.Sprintf("\n# %v = %v", key, value)
	}
	prefix += "\n"
	return prefix
}


func (t *Template) WriteTemplate(answerData map[string]interface{}) error {
	templatedFilePath, err := utils.PopulateTemplate(t.FilePath, answerData)
	if err != nil {
		return err
	}
	templatedFilePath, err = utils.ExpandPath(templatedFilePath)
	if err != nil {
		return err
	}

	templatedContent, err := utils.PopulateTemplate(t.Content, answerData)
	if err != nil {
		return err
	}

	if !utils.FileExists(templatedFilePath){

		//make the file's parent directory.
		err = os.MkdirAll(filepath.Dir(templatedFilePath), 0777)
		if err != nil {
			return err
		}

		log.Printf("Writing template to %v", templatedFilePath)
		err = utils.FileWrite(templatedFilePath,templatedContent, 0644)
		if err != nil {
			return err
		}

	} else {
		return errors.TemplateFileExistsError(fmt.Sprintf("file at %v already exists. Cannot write template file", templatedFilePath))
	}
	return nil
}