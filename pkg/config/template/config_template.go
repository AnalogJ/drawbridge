package template

import (
	"drawbridge/pkg/utils"
	"fmt"
	"github.com/fatih/color"
	"path"
)

// for configs `filepath`, must be relative to config_dir
//for configs `pem_filepath` must be relative to pem_dir
type ConfigTemplate struct {
	FileTemplate `mapstructure:",squash"`
	PemFilePath  string `mapstructure:"pem_filepath"`
}

func (t *ConfigTemplate) DeleteTemplate(answerData map[string]interface{}) error {
	t.FilePath = path.Join(answerData["config_dir"].(string), t.FilePath)
	return t.FileTemplate.DeleteTemplate(answerData)
}

func (t *ConfigTemplate) WriteTemplate(answerData map[string]interface{}, ignoreKeys []string) (map[string]string, error) {
	returnData := map[string]string{}

	answerData, err := utils.MapDeepCopy(answerData)
	if err != nil {
		return nil, err
	}

	// modify/tweak the config template because its a known type.
	//expand PemFilePath
	t.PemFilePath = path.Join(answerData["pem_dir"].(string), t.PemFilePath)
	templatedPemFilePath, err := utils.PopulateTemplate(t.PemFilePath, answerData)
	if err != nil {
		return nil, err
	}
	templatedPemFilePath, err = utils.ExpandPath(templatedPemFilePath)
	if err != nil {
		return nil, err
	}
	answerData["pem_filepath"] = templatedPemFilePath
	returnData["pem_filepath"] = templatedPemFilePath

	if !utils.FileExists(templatedPemFilePath) {
		color.Yellow("WARNING: PEM file missing. Place it at the following location before attempting to connect. %v", templatedPemFilePath)
	}

	t.FilePath = path.Join(answerData["config_dir"].(string), t.FilePath)
	t.Content = configTemplatePrefix(answerData, ignoreKeys) + t.Content

	templateReturnData, err := t.FileTemplate.WriteTemplate(answerData)
	for k, v := range templateReturnData {
		returnData[k] = v
	}

	if err != nil {
		return nil, err
	}

	return returnData, nil

}

func configTemplatePrefix(answerData map[string]interface{}, ignoreKeys []string) string {
	prefix := utils.StripIndent(
		`
		# This file was automatically generated by Drawbridge
		# Do not modify.
		#
		# Answers:`)
	for key, value := range answerData {
		if utils.StringInSlice(ignoreKeys, key) {
			continue
		}

		prefix += fmt.Sprintf("\n# %v = %v", key, value)
	}
	prefix += "\n"
	return prefix
}
